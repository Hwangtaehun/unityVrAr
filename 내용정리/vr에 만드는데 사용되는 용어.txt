DrawCrosshair()함수의 파라미터
isHand: 손을 위치와 방향으로 레이를 쏴서 크로스헤어를 그릴지 여부를 알 수 있다. 
false이면 화면 정중앙으로 레이를 쏴서 크로스헤어를 그린다.

hand: 오른손인지 왼손인지 여부를 알 수 있다.

Plane클래스의 생성자 함수
public Plane(Vector3 inNormal, Vector3 inPoint);
public Plane(Vector3 inNormal, float d);
public Plane(Vector3 a, Vector3 b, Vector3 c);

Plane 생성자 함수의 파라미터
inNormal: 플레인의 면이 향할 방향
inPoint: 플레인이 지나는 한 점
d: 원점에서의 거리
a, b, c: 삼각형 평면 각 점의 위치

OvrInput의 Get()함수 원형
public static bool Get(Button virtualMask, Controller controllerMask = Cotroller.Active)
virtualMask: OvrInput.Button 열거형 타입의 값
controllerMask: 사용할 컨트롤러 RTouch, LTouch 값, Active일 때는 현재 사용하는 컨트롤러 

public static Vector2 Get(Axis2D vritualMask, Controller controllerMask = Controller.Active); 
virtualMask: PrimaryThumbstick, PrimaryTouchpad, SecondaryThumstick, SecondaryTouchpad, Any값 중 하나를 갖습니다.
controllerMask: RTouch, LTouch, Active 중 하나를 갖습니다.

PlayVibration()함수의 파라미터 값
duration: 진동의 지속 시간
frequency: 진동의 빈도, 0~1사이 값
amplitude: 진동 크기, 0~1사이 값
hand: 왼쪽 또는 오른쪽 컨트롤러

VibrationCoroutine()코루틴 함수의 파라미터
duration: 지속 시간
frequency: 빈도
Amplitude: 진동크기
hand: RTouch 또는 LTouch

SteamVR_Input의 GetState()함수 원형
public static bool GetState(string action, SteamVR_Input_Sources inputSource, bool caseSensitive = false)
action: SteamVR Input 창에 등록된 액션 값
inputSources: LeftHand, RightHand 값
caseSensitive: 대소문자 구분 여부

SteamVR_Input의 GetVecotr2()함수 원형
public static Vector2 GetVector2(string action, StreamVR_Input_Sources inputSource, bool caseSensitive = false)
action: SteamVR Input 창에 등록된 액션 값
inputSources: LeftHand, RightHand 값
caseSensitive: 대소문자 구분 여부

StreamVR_Action_Vibration.Execute()함수 원형
public void Execute(float secondsFromNow, float durationSeconds, float frequency, float amplitude, SteamVR_Input_Sources inputSource)
secondsFromNow: 진동이 시작할 시간
durationSeconds: 지속 시간
frequency: 빈도
amplitude: 진동 크기
inputSource: LeftHand, RightHand

조준점: 크로스헤어(crosshair)

DrawCrosshair함수의 원형
public static void DrawCrosshair(Transform crosshair, bool isHand = true, Controller hand = Controller.RTouch);

쿼터나온 연산 공식
angle1 = Q1, angle2 = Q2
1.angle1 + angle2 = Q1 * Q2
2.-angle2 = Quaternion.Inverse(Q2)
3.angle2 - angle1 = Quaternion.FromToRotation(Q1, Q2) = Q2*Quaternion.Inverse(Q1)

SphereCast()함수의 원형
public static bool SphereCast(Ray ray, float radius, out RaycastHit hitInfo, float maxDistance, int layerMask);
